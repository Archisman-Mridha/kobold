# NOTE:
# this file is intended to use via bin/task,
# after installing the dependencies with 'go mod download'

version: "3"

env:
  CONTAINER_REGISTRY: docker.io
  VERSION: dev

tasks:
  default:
    desc: Show the task list
    cmds:
      - bin/task --list-all

  check:*:
    desc: Run all checks
    cmds:
      - task: check:vet
      - task: check:test

  check:vet:
    desc: Vet the source code
    cmds:
      - go vet ./...

  check:test:
    desc: Run test suit
    cmds:
      - go test ./...

  build:*:
    desc: Build all binaries
    cmds:
      - task: build:gitgo
      - task: build:gitexec

  build:
    internal: true
    cmds:
      - go build -o bin/{{.OUTPUT}} -tags {{.BUILD_TAG}} -ldflags '-w -s -X main.version={{.VERSION}}' ./cmd/server/
    requires:
      vars:
        - BUILD_TAG
        - OUTPUT

  build:gitgo:
    desc: Build the server with gitgo
    cmds:
      - task: build
        vars:
          BUILD_TAG: gitgo
          OUTPUT: kobold

  build:gitexec:
    desc: Build the server with gitexec
    cmds:
      - task: build
        vars:
          BUILD_TAG: gitexec
          OUTPUT: kobold-gitexec

  image:build:
    desc: Build the images adn load the into the local daemon
    cmds:
      - docker buildx bake -f build/docker-bake.hcl --set=*.output=type=docker

  image:publish:
    desc: Build and publish the images
    cmds:
      - docker buildx bake -f build/docker-bake.hcl --set=*.output=type=registry

  e2e:up:
    desc: Local end to end setup using gitea and kind
    cmds:
      - bash e2e/up.sh

  e2e:down:
    desc: Tear down the local e2e setup
    cmds:
      - bash e2e/down.sh

  dist:*:
    desc: Build all artifacts
    deps:
      - dist:clear
    cmds:
      - task: dist:image
      - task: dist:manifests
      - task: dist:schema
      - task: dist:binaries

  dist:dir:
    internal: true
    cmds:
      - mkdir -p .dist

  dist:clear:
    internal: true
    cmds:
      - rm -rf .dist/*

  dist:binaries:
    desc: Build and archive the binaries
    deps:
      - build:*
    cmds:
      - tar -czf .dist/kobold-{{OS}}-{{ARCH}}.tgz bin/kobold
      - tar -czf .dist/kobold-gitexec-{{OS}}-{{ARCH}}.tgz bin/kobold-gitexec

  dist:image:
    desc: Build the container image
    deps:
      - dist:dir
    cmds:
      - docker buildx bake -f build/docker-bake.hcl

  dist:manifests:
    desc: Build the kubernetes manifests
    deps:
      - dist:dir
      - bin:kustomize
    cmds:
      - bin/kustomize build manifests/dist/ -o .dist/kobold.yaml

  dist:schema:
    desc: Copy the config json schema to the dist dir
    deps:
      - dist:dir
    cmds:
      - cp assets/schema.json .dist/

  docs:publish:
    desc: Build and publish the docs to github pages
    deps:
      - bin:mdbook
    cmds:
      - bash docs/publish.sh

  docs:serve:
    desc: Serve the docs
    deps:
      - bin:mdbook
    cmds:
      - bin/mdbook serve docs/

  bin:mdbook:
    internal: true
    status:
      - test -x bin/mdbook
    cmds:
      - curl -fsSL https://github.com/rust-lang/mdBook/releases/download/v0.4.14/mdbook-v0.4.14-x86_64-unknown-linux-gnu.tar.gz | tar -C bin -xzf -

  bin:kustomize:
    internal: true
    dir: bin
    status:
      - test -x kustomize
    cmds:
      - curl -fsSL "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
